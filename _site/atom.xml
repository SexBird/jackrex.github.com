<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 <title>Jackrex博客</title>
 <link href="http://lenage.github.com/atom.xml" rel="self"/>
 <link href="http://lenage.github.com/"/>
 <updated>2013-05-01T00:06:25+08:00</updated>
 <id>http://lenage.github.com/</id>
 <author>
   <name>lenage</name>
   <email>lendage@gmail.com</email>
 </author>
 
   <entry>
     <title>nginx反向代理自定义error_page</title>
     <link href="http://lenage.github.com/tech/2012/12/09/nginx-use-error-page-for-proxy-status-code/"/>
     <updated>2012-12-09T00:00:00+08:00</updated>
     <id>http://lenage.github.com/tech/2012/12/09/nginx-use-error-page-for-proxy-status-code</id>
     <content type="html">&lt;h2 id='id1'&gt;背景&lt;/h2&gt;

&lt;p&gt;caveman中如果没有找到路由则返回状态码404,但是不任何内容,所以需要nginx提供自定义404页面. 用&lt;code&gt;error_page 404 /404.html;&lt;/code&gt;没有效果.&lt;/p&gt;

&lt;h2 id='id2'&gt;解决&lt;/h2&gt;

&lt;p&gt;使用&lt;code&gt;proxy_intercept_errors&lt;/code&gt;,详细见这里&lt;span&gt;proxy_intercept_errors&lt;/span&gt;, 如果设置为&lt;code&gt;on&lt;/code&gt;, 将捕获&amp;gt;400的状态码，并按照&lt;code&gt;error_page&lt;/code&gt;的配置返回页面，如果没有配置则抛回给被代理服务器. 所以配置看起来是这样的: &lt;script src='https://gist.github.com/4241137.js'&gt; &lt;/script&gt;&lt;/p&gt;</content>
   </entry>
 
   <entry>
     <title>部署Caveman到Amazon EC2</title>
     <link href="http://lenage.github.com/tech/2012/12/08/deploy-caveman-app-to-ec2/"/>
     <updated>2012-12-08T00:00:00+08:00</updated>
     <id>http://lenage.github.com/tech/2012/12/08/deploy-caveman-app-to-ec2</id>
     <content type="html">&lt;p&gt;上篇&lt;a href='http://blog.lenage.com/tech/2012/12/07/deploy-common-lisp-app-to-heroku/'&gt;部署Lisp应用到heroku&lt;/a&gt;水分有点大，反正用Caveman框架写的demo没跑起来过。 这篇记录一下部署到Amazon EC2的过程。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Caveman是一个Common Lisp的web框架, 基于clack, 更多&lt;a href='https://github.com/fukamachi/caveman'&gt;戳这里&lt;/a&gt;,作者是个日本人, &lt;a href='https://twitter.com/nitro_idiot'&gt;twitter帐号&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;首先是创建EC2 Instance之类的不多说。&lt;/p&gt;

&lt;p&gt;其次, 安装:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get install tmux&lt;/code&gt; 用于跑REPL然后关掉终端但是执行的命令继续跑，&lt;a href='http://stackoverflow.com/questions/451329/what-is-the-preferred-way-to-run-lisp-web-application'&gt;StackOverflow&lt;/a&gt;上的讨论。&lt;/li&gt;

&lt;li&gt;&lt;code&gt;sudo apt-get install sbcl&lt;/code&gt; 详细 http://www.sbcl.org/&lt;/li&gt;

&lt;li&gt;&lt;code&gt;quicklisp&lt;/code&gt; 安装看&lt;a href='http://www.quicklisp.org/beta/'&gt;这里&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;设置服务端的git，然后push代码到EC2， 可以参考这篇文章: &lt;a href='http://tumblr.intranation.com/post/766290565/how-set-up-your-own-private-git-server-linux'&gt;How to set up your own private Git server on Linux&lt;/a&gt; 和&lt;a href='http://news.ycombinator.com/item?id=1652414'&gt;HN上的讨论&lt;/a&gt;，具体流程看这个&lt;a href='https://gist.github.com/4239048'&gt;gist&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;然后，启动sbcl, 在tmux中运行&lt;code&gt;sbcl --load quicklisp.lisp&lt;/code&gt;, 执行&lt;code&gt;(ql:quickload :myapp)&lt;/code&gt;, 如有报错请检查quicklisp是否 安装正确，或者myapp目录是否在&lt;code&gt;quicklisp/local_projects/&lt;/code&gt;目录下面，&lt;/p&gt;

&lt;p&gt;最后, 在sbcl中运行&lt;code&gt;(myapp:start)&lt;/code&gt; 启动. 启动后默认端口为5000(参&lt;code&gt;config/dev.lisp&lt;/code&gt;), 如果想直接用80端口的话，&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sudo sbcl --load quicklisp.lisp&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;code&gt;(ql:quickload :myapp)&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;code&gt;(myapp:start :port 80)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id='demo'&gt;&lt;a href='http://llbire.com'&gt;Demo&lt;/a&gt;&lt;/h2&gt;</content>
   </entry>
 
   <entry>
     <title>部署Common Lisp应用到heroku</title>
     <link href="http://lenage.github.com/tech/2012/12/07/deploy-common-lisp-app-to-heroku/"/>
     <updated>2012-12-07T00:00:00+08:00</updated>
     <id>http://lenage.github.com/tech/2012/12/07/deploy-common-lisp-app-to-heroku</id>
     <content type="html">&lt;p&gt;Heroku暂时还没有支持cl的stack，不过可以使用&lt;a href='https://devcenter.heroku.com/articles/third-party-buildpacks'&gt;第三方的build-package&lt;/a&gt;,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;按照Github上的&lt;a href='https://github.com/jsmpereira/heroku-cl-example'&gt;exapmle project&lt;/a&gt;创建app:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nv'&gt;$ &lt;/span&gt;heroku create -s cedar --buildpack http://github.com/jsmpereira/heroku-buildpack-cl.git
Creating fierce-ravine-4120... &lt;span class='k'&gt;done&lt;/span&gt;, stack is cedar
&lt;span class='nv'&gt;BUILDPACK_URL&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;http://github.com/jsmpereira/heroku-buildpack-cl.git
http://fierce-ravine-4120.herokuapp.com/ | git@heroku.com:fierce-ravine-4120.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;启用&lt;a href='https://devcenter.heroku.com/articles/labs-user-env-compile'&gt;user-env-compile&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;使用sbcl &lt;code&gt;heroku config:add CL_IMPL=sbcl --app {app_name}&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;使用hunchentoot做web server &lt;code&gt;heroku config:add CL_WEBSERVER=hunchentoot&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;添加heroku到git remote host&lt;/li&gt;
&lt;/ol&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;   &lt;span class='nb'&gt;cd &lt;/span&gt;myapp
   git init  &lt;span class='o'&gt;&amp;amp;&amp;amp;&lt;/span&gt; git add .
   git commit -m &lt;span class='s2'&gt;&amp;quot;first commit&amp;quot;&lt;/span&gt;
   git remote add heroku git@heroku.com:fierce-ravine-4120.git
   git push heroku master
   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;修改&lt;code&gt;heroku-setup.lisp&lt;/code&gt;, 将example修改为自己的app-name, 我这里是&lt;code&gt;myapp&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;code&gt;git push heroku master&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;PS: 另外可以重写 &lt;code&gt;heroku-toplevel&lt;/code&gt; 函数来自定义启动app&lt;/p&gt;</content>
   </entry>
 
   <entry>
     <title>Capistrano 技巧</title>
     <link href="http://lenage.github.com/tech/2012/12/04/capistrano-tips/"/>
     <updated>2012-12-04T00:00:00+08:00</updated>
     <id>http://lenage.github.com/tech/2012/12/04/capistrano-tips</id>
     <content type="html">&lt;ol&gt;
&lt;li&gt;&lt;code&gt;%x{command}&lt;/code&gt; 在本地执行命令&lt;/li&gt;

&lt;li&gt;&lt;code&gt;stream &amp;quot;cd #{shared_path} &amp;amp;&amp;amp; tail -f log/production.log&amp;quot;&lt;/code&gt; 查看服务器log&lt;/li&gt;
&lt;/ol&gt;</content>
   </entry>
 
   <entry>
     <title>Jekyll利用pygments高亮lisp代码</title>
     <link href="http://lenage.github.com/tech/2012/11/30/jeykll-highlight-lisp-with-pygments/"/>
     <updated>2012-11-30T00:00:00+08:00</updated>
     <id>http://lenage.github.com/tech/2012/11/30/jeykll-highlight-lisp-with-pygments</id>
     <content type="html">&lt;p&gt;主要是找对language关键词，高亮lisp的话用langauge用cl就ok了，比如&lt;/p&gt;
&lt;script src='https://gist.github.com/4174212.js'&gt; &lt;/script&gt;
&lt;p&gt;另外如果在本地测试的话需要安装Pygments: &lt;code&gt;sudo pip install Pygments&lt;/code&gt;&lt;/p&gt;</content>
   </entry>
 
   <entry>
     <title>Emacs配置yasnippet</title>
     <link href="http://lenage.github.com/tech/2012/11/30/config-yasnippets-for-emacs/"/>
     <updated>2012-11-30T00:00:00+08:00</updated>
     <id>http://lenage.github.com/tech/2012/11/30/config-yasnippets-for-emacs</id>
     <content type="html">&lt;p&gt;适用版本: Emacs 24+&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;添加package源，将如下代码加到&lt;code&gt;.emacs&lt;/code&gt; 或者 &lt;code&gt;.emacs.d/init.el&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cl'&gt;&lt;span class='c1'&gt;;; set packages&lt;/span&gt;
&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;require&lt;/span&gt; &lt;span class='ss'&gt;&amp;#39;package&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;setq&lt;/span&gt; &lt;span class='nv'&gt;package-archives&lt;/span&gt;
      &lt;span class='o'&gt;&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;((&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;original&amp;quot;&lt;/span&gt;    &lt;span class='o'&gt;.&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;http://tromey.com/elpa/&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
        &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;gnu&amp;quot;&lt;/span&gt;         &lt;span class='o'&gt;.&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;http://elpa.gnu.org/packages/&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
        &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;marmalade&amp;quot;&lt;/span&gt;   &lt;span class='o'&gt;.&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;http://marmalade-repo.org/packages/&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
        &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;melpa&amp;quot;&lt;/span&gt;       &lt;span class='o'&gt;.&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;http://melpa.milkbox.net/packages/&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)))&lt;/span&gt;
&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;package-initialize&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;M-x eval-buffer&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;M-x package-list-packages&lt;/code&gt; 按照你的网速快慢，可能需要半分钟左右.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;在打开的Packages Buffer中，找到&lt;code&gt;yasnippet&lt;/code&gt; &lt;code&gt;yasnippet-bundle&lt;/code&gt; &lt;code&gt;yas-jit&lt;/code&gt;, 并按&lt;code&gt;i&lt;/code&gt;(install) 标记安装.最后按&lt;code&gt;x&lt;/code&gt;安装。 PS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;yasnippet-bundle&lt;/code&gt;(可选) &amp;#8211; 自动编译snippets&lt;/li&gt;

&lt;li&gt;&lt;code&gt;yas-jit&lt;/code&gt;(可选) &amp;#8211; 按需加载snippets&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;配置yasnippet,这里分两种情况: 安装yas-jit和没有安装yas-jit:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如果安装了&lt;code&gt;yas-int&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cl'&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;require&lt;/span&gt; &lt;span class='ss'&gt;&amp;#39;yas-jit&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;require&lt;/span&gt; &lt;span class='ss'&gt;&amp;#39;dropdown-list&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;setq&lt;/span&gt; &lt;span class='nv'&gt;yas/prompt-functions&lt;/span&gt; &lt;span class='o'&gt;&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;
                             &lt;span class='nv'&gt;yas/ido-prompt&lt;/span&gt;
                             &lt;span class='nv'&gt;yas/dropdown-prompt&lt;/span&gt;
                             &lt;span class='nv'&gt;yas/completing-prompt&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;setq&lt;/span&gt; &lt;span class='nv'&gt;yas/root-directory&lt;/span&gt; &lt;span class='o'&gt;&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;
                           &lt;span class='s'&gt;&amp;quot;~/.emacs.d/snippets&amp;quot;&lt;/span&gt; &lt;span class='c1'&gt;;; 自己的snippets&lt;/span&gt;
                           &lt;span class='s'&gt;&amp;quot;~/.emacs.d/elpa/yasnippet-20121127.25/snippets&amp;quot;&lt;/span&gt; &lt;span class='c1'&gt;;; yasnippet提供的&lt;/span&gt;
                           &lt;span class='s'&gt;&amp;quot;~/.emacs.d/vendor/yasnippets-rails/rails-snippets&amp;quot;&lt;/span&gt; &lt;span class='c1'&gt;;; 其他&lt;/span&gt;
                           &lt;span class='s'&gt;&amp;quot;~/.emacs.d/vendor/yasnippets-shoulda&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;yas/jit-load&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;* 如果没有安装&lt;code&gt;yas-jit&lt;/code&gt;&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cl'&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;require&lt;/span&gt; &lt;span class='ss'&gt;&amp;#39;yasnippet&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;yas-global-mode&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;require&lt;/span&gt; &lt;span class='ss'&gt;&amp;#39;dropdown-list&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;setq&lt;/span&gt; &lt;span class='nv'&gt;yas/prompt-functions&lt;/span&gt; &lt;span class='o'&gt;&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nv'&gt;yas/ido-prompt&lt;/span&gt;
                              &lt;span class='nv'&gt;yas/dropdown-prompt&lt;/span&gt;
                              &lt;span class='nv'&gt;yas/completing-prompt&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;yas/load-directory&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;~/.emacs.d/vendor/yasnippets-rails/rails-snippets&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;yas/load-directory&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;~/.emacs.d/vendor/yasnippets-shoulda&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;6. 完了.&lt;/p&gt;

&lt;p&gt;欢迎参考我的&lt;a href='http://github.com/lenage/emacs-config'&gt;emacs-config&lt;/a&gt;&lt;/p&gt;

&lt;h3 id='known_issue'&gt;Known issue&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;markdown-mode 下由于 &lt;code&gt;TAB&lt;/code&gt; 被绑定到了 &lt;code&gt;markdown-cycle&lt;/code&gt;上，所以无法展开snippets。 查看键绑定&lt;code&gt;C-h k RET TAB&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;TAB runs the command markdown-cycle, which is an interactive compiled Lisp function in &amp;#8216;markdown-mode.el&amp;#8217;.&lt;/p&gt;
&lt;/blockquote&gt;</content>
   </entry>
 
   <entry>
     <title>Linux Rename Multiple Files</title>
     <link href="http://lenage.github.com/tech/2012/11/20/rename-multiple-file/"/>
     <updated>2012-11-20T00:00:00+08:00</updated>
     <id>http://lenage.github.com/tech/2012/11/20/rename-multiple-file</id>
     <content type="html">&lt;p&gt;不是常用到会容易忘记，在这里记一下:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;rename 用法(Mac下需要先安装&lt;code&gt;brew install rename&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;rename 正则 files # rename s/alice/bob/g &lt;em&gt;.html rename oldname newname&lt;/em&gt;.files&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;用&lt;code&gt;find&lt;/code&gt;找出需要rename的文件，然后用&lt;code&gt;-exec&lt;/code&gt; 参数重命名， 比如将当前文件夹下面的说有html.erb文件改为 html:&lt;/p&gt;

&lt;p&gt;find . -name &amp;#8221;&lt;em&gt;html.erb&amp;#8221; -exec rename s/html.erb/html/ {} \;&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;3. 搞完收工&lt;/p&gt;</content>
   </entry>
 
   <entry>
     <title>Emacs 编辑远程文件</title>
     <link href="http://lenage.github.com/tech/2012/08/24/emacs-editing-remote-file/"/>
     <updated>2012-08-24T00:00:00+08:00</updated>
     <id>http://lenage.github.com/tech/2012/08/24/emacs-editing-remote-file</id>
     <content type="html">&lt;p&gt;&lt;a href='http://savannah.gnu.org/projects/tramp'&gt;Tramp&lt;/a&gt; 是emacs下用来快速编辑远程文件的package, 用起来真的很方便:) Emacs 24 内置 Tramp 所以不用配置就可以直接使用 &lt;img src='/images/2012-08/tramp.png' alt='build in screenshot' /&gt;&lt;/p&gt;

&lt;p&gt;打开远程文件: &lt;code&gt;C-x C-f /myserver:public_html/foo.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;或者&lt;/p&gt;

&lt;p&gt;&lt;code&gt;C-x C-f /ssh:username@hostname:file&lt;/code&gt; ps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;myserver 是在.ssh/config 里面写好的server name&lt;/li&gt;

&lt;li&gt;文件默认路径是~, &lt;code&gt;:file&lt;/code&gt; 相当于 &lt;code&gt;:~/file&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href='http://www.gnu.org/software/tramp/#Filename-Syntax'&gt;更加全面的User Manual&lt;/a&gt;&lt;/p&gt;</content>
   </entry>
 
   <entry>
     <title>书单</title>
     <link href="http://lenage.github.com/startup/2012/08/14/what-are-most-read-book-written-by-successfully-enterprenurs/"/>
     <updated>2012-08-14T00:00:00+08:00</updated>
     <id>http://lenage.github.com/startup/2012/08/14/what-are-most-read-book-written-by-successfully-enterprenurs</id>
     <content type="html">&lt;p&gt;来自qoura的这个&lt;a href='http://www.quora.com/Startups/What-are-some-must-read-books-written-by-successful-entrepreneurs'&gt;问题&lt;/a&gt;, 里面列出了&lt;a href='http://sivers.org/book'&gt;Derek Sivers的书单&lt;/a&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Tue Aug 14 13:50:56 2012&lt;/p&gt;</content>
   </entry>
 
   <entry>
     <title>为emacs 配置auto-complete</title>
     <link href="http://lenage.github.com/tech/2012/08/13/config-auto-complete-in-emacs/"/>
     <updated>2012-08-13T00:00:00+08:00</updated>
     <id>http://lenage.github.com/tech/2012/08/13/config-auto-complete-in-emacs</id>
     <content type="html">&lt;p&gt;早上写了一半又删掉了，因为写着写着突然感觉这么简单的问题大家都会懂， 但晚上又觉得还是要写出来， 仅仅作为记录。&lt;/p&gt;

&lt;p&gt;起初是使用smart-tab 这个函数&lt;a href='https://github.com/lenage/emacs-config/blob/master/lenage/tabs.el'&gt;github连接&lt;/a&gt;来做补全的 一般情况下都是够用的， 直到后来ruby-mode只有indent没有补全(不知道是什么原因，求指点)，一定 是我打开的方式不对。于是安装了auto-complete：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;install, 如果是&amp;gt;emacs24 的话，直接 &lt;code&gt;M-x package-install RET auto-complete&lt;/code&gt; PS: 没有实测，我自己是苦逼的 &lt;code&gt;M-x package-list-packages&lt;/code&gt; 然后搜索 complete 安装的。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;使用， 在&lt;code&gt;.emacs&lt;/code&gt; 添加&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(require &amp;#39;auto-complete)
(require &amp;#39;auto-complete-config)
(ac-config-default)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就能出现如下图的效果&lt;img src='http://cx4a.org/software/auto-complete/ac.png' alt='效果图不是我的截图' /&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;然后想关掉popup的话 &lt;code&gt;(setq ac-auto-show-menu nil)&lt;/code&gt;, 想在popup(严格的说是menu)上面使用 &lt;code&gt;C-n, C-p&lt;/code&gt;来选词的话, auto-complete的完整配置&lt;a href='https://github.com/lenage/emacs-config/blob/master/lenage/auto-complete.el'&gt;在这里&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define-key ac-completing-map (kbd &amp;quot;C-n&amp;quot;) &amp;#39;ac-next)
(define-key ac-completing-map (kbd &amp;quot;C-p&amp;quot;) &amp;#39;ac-previous)&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;要clone的话，&lt;code&gt;git clone https://github.com/lenage/emacs-config.git ~/.emacs.d&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;Update1: 在这里贴大段的代码还是很丑的，改用github文件连接 Update2: 更加详细的文档 http://cx4a.org/software/auto-complete/manual.html&lt;/p&gt;

&lt;p&gt;Mon Aug 13 22:49:49 2012&lt;/p&gt;</content>
   </entry>
 
</feed>
